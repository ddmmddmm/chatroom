<!DOCTYPE html>
<html lang="zh">
<head>
    <meta content="yes" name="apple-mobile-web-app-capable">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title><%= title %></title>
    <style>
        body {
            padding: 0;
            max-width: 600px;
            margin: 0 auto;
            font-family: -apple-system, BlinkMacSystemFont, "PingFang SC", "Helvetica Neue", STHeiti, "Microsoft Yahei", Tahoma, Simsun, sans-serif;
        }

        /*body:before {
            content: ' ';
            position: fixed;
            z-index: -1;
            top: -300px;
            right: 0;
            bottom: 0;
            left: -150px;
            background-size: 100% auto;
            background: url(/images/bg/cat_99.jpg);
        }*/

        ul, li {
            margin: 0;
            padding: 0;
        }

        li {
            list-style: none
        }

        .input_wrap:before {
            content: " ";
            position: absolute;
            height: 1px;
            border-top: 1px solid #cecaca;
            -webkit-transform-origin: 0 0;
            transform-origin: 0 0;
            -webkit-transform: scaleY(0.5);
            transform: scaleY(0.5);
            z-index: 2;
            left: 32px;
            right: 32px;
        }

        .input_wrap:after {
            content: " ";
            position: absolute;
            height: 1px;
            border-top: 1px solid #cecaca;
            -webkit-transform-origin: 0 0;
            transform-origin: 0 0;
            -webkit-transform: scaleY(0.5);
            transform: scaleY(0.5);
            z-index: 2;
            left: 32px;
            right: 32px;
        }

        .input_wrap {
            position: relative;
            margin-top: 10px;
            margin-bottom: 18px;
        }

        .input_wrap .input_tmp {
            padding: 16px 32px;
        }

        .input_wrap .input_tmp #input_box {
            width: 100%;
            display: block;
            background: transparent;
            border: 0;
            outline: 0;
            resize: none;
            -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
            caret-color: #666;
        }

        #content {
            margin: 0 10px;
            font-size: 16px;
            color: #000;
            letter-spacing: 1px;
        }

        #online {
            margin: 0 10px;
            font-size: 12px;
            color: #009688;
            margin-bottom: 6px;
        }

        #lyric {
            margin: 0 10px;
            font-size: 12px;
            color: #00BCD4;
            margin-bottom: 10px;
            text-align: center;
            white-space: nowrap;
            text-overflow: ellipsis;
            overflow: hidden;
        }

        #content .date {
            list-style: none;
            text-align: center;
            color: #000;
            font-size: 18px;
            margin: 22px 0;
            padding: 6px 0;
            letter-spacing: 2px;
        }

        #content .date .text {
            vertical-align: bottom;
        }

        #content .time {
            list-style: none;
            text-align: center;
            color: #999;
            font-size: 12px;
            margin: 10px 0;
        }

        #content .time .text {
            vertical-align: bottom;
        }

        #content .time img {
            width: 18px;
            height: 18px;
            vertical-align: bottom;
        }

        #content .name {
            font-size: 14px;
            width: 100%;
            position: relative;
        }

        #content .msg-box {
            padding: 8px 30px 8px 30px;
            margin: 6px 50px;
            border-radius: 5px;
        }

        .clear {
            clear: both
        }

        .nameMe {
            text-align: right;
            float: right;
            color: #5f9ea0;
        }

        .nameOther {
            text-align: left;
            color: #ed143d
        }

        .nameOther img {
            width: 45px;
            height: 45px;
            position: absolute;
            top: 18px;
            left: -1px;
            border-radius: 5px;
        }

        .msgMe {
            float: right;
            background-color: #faebd7;
        }

        .nameMe img {
            width: 45px;
            height: 45px;
            position: absolute;
            top: 18px;
            right: -1px;
            border-radius: 5px;
        }

        .msgOther {
            float: left;
            background-color: #f0f8ff;
        }

        .psw_box {
            position: absolute;
            height: 100%;
            width: 100%;
            top: 0;
            left: 0;
        }

        .psw_box .wrap {
            height: 50%;
            position: absolute;
            top: 0;
            width: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
        }

        .psw_box .wrap .desc {
            text-align: center;
        }

        .psw_box .wrap #psw_input {
            padding: 0 10px;
            margin-top: 100px;
            width: 50%;
            display: block;
            height: 30px;
            border: 1px solid #666;
            border-radius: 3px;
            outline: 0;
            resize: none;
            -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
        }

        .psw_box .wrap #psw_btn {
            width: 100%;
            margin: 30px auto 0 auto;
            text-align: center;
            height: 50px;
            line-height: 50px;
            background: antiquewhite;
            font-size: 16px;
            color: #666;
        }

        [v-cloak] {
            display: none
        }
    </style>
</head>
<body>
<div id="app" v-cloak>
    <div id="content" v-show="showContent">
        <ul>
            <template v-for="item in msgList">
                <li v-if="item.needShowDate" class="date">
                    <span class="text">{{ item.dateForShow }}</span>
                </li>
                <li v-if="item.needShowTime" class="time">
                    <img v-bind:src="item.KejiImg">
                    <span class="text">{{ item.timeForShow }}</span>
                    <img v-bind:src="item.KejiImg">
                </li>
                <li>
                    <div v-if="item.needShowName" class="name" v-bind:class=" [item.isMe ? 'nameMe' : 'nameOther'] ">
                        <span>{{item.name}}</span>
                        <img v-bind:src="item.headImg">
                    </div>
                    <div class="msg-box" v-bind:class=" [item.isMe ? 'msgMe' : 'msgOther'] ">
                        <span v-html="item.msg"></span>
                    </div>
                    <div class="clear"></div>
                </li>
            </template>
        </ul>
    </div>
    <div class="bottom" v-show="showTextarea">
        <div id="online"></div>
        <div id="lyric" style="display: none"></div>
        <div class="input_wrap">
            <div class="input_tmp">
                <textarea id="input_box" placeholder="输入你想说的话，回车键发送" rows="5"></textarea>
            </div>
        </div>
    </div>
    <div class="psw_box" v-show="showPswBox">
        <div class="wrap">
            <div class="desc">
                访问此房间需要输入密码
            </div>
            <input type="tel" id="psw_input" placeholder="输入密码">
            <div id="psw_btn" v-on:click="authPsw">提交</div>
        </div>
    </div>
</div>
<script src="/socket.io/socket.io.js"></script>
<script src="/js/vue.dev.js"></script>
<script src="/js/zepto.js"></script>
<script src="/js/lyric.js"></script>
<script src="/js/md5.min.js"></script>
<script src="/js/js.cookie.min.js"></script>
<script>
    /*
    * 时间出现算法：
    * 第一条一定显示一次时间，后面，如果上一条消息跟下一条消息间隔在[60s]以上则在信息上面显示一次时间
    *
    * 名字显示算法：
    * 上条消息没有显示名字，或者相邻的两条消息不是同一个人发的，或者显示了时间，则出现名字
    *
    * 柯基出现算法：
    * 获取显示的时间的字符串hashcode，对24(目前柯基有25张图)取模，在不存储在服务端的情况下，保证每一个时间点的柯基在刷新之后都是固定的
    *
    * 头像算法：
    * 获取(名字 + 当天日期(yyyy-mm-dd))字符串的hashcode，对40(目前头像有41张图)取模，在不存储在服务端的情况下，保证聊天双方看到的头像是一致的，
    * 且相同名字，每天的头像会换(不排除有相同的情况)
    *
    * 歌词出现算法：
    * 在歌词文件(lyric.js)中先将多首歌词的数组打乱，push进一个数组，且先在0到10之间随机获取一个数字(保证不会每次都从一首歌的第一句开始)，
    * 逐行显示，切换间隔6s
    *
    * 防止xss：
    * 对于用户输入的，简单替换了一些字符[&'"<>]为html实体
    * */
    // 日期格式化方法
    Date.prototype.Format = function (fmt) {
        var o = {
            "M+": this.getMonth() + 1, //月份
            "d+": this.getDate(), //日
            "h+": this.getHours(), //小时
            "m+": this.getMinutes(), //分
            "s+": this.getSeconds(), //秒
            "S": this.getMilliseconds() //毫秒
        };
        if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
        for (var k in o)
            if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
        return fmt;
    };

    // 字符串hashcode方法
    String.prototype.hashCode = function () {
        var hash = 0;
        for (var i = 0; i < this.length; i++) {
            var character = this.charCodeAt(i);
            hash = ((hash << 5) - hash) + character;
            hash = hash & hash; // Convert to 32bit integer
        }
        return hash;
    };

    let channelConfig = {
        common: 'chat message',// 公共消息（客户端服务端都是推 + 拉）
        first: 'chat first',// 客户端首次连接信息（客户端推，服务端拉）
        init: 'chat init',// 推送消息记录（客户端拉，服务端推）
        online: 'chat online',// 推送在线列表（客户端拉，服务端推）
    };
    let errorTypeConfig = {
        notAuth: 'AUTHENTICATION ERROR',
        notRoomId: 'ROOM ID EMPTY ERROR',
    };
    let cookieConfig = {
        name: 'chatName'
    };
    let roomId = '<%= roomId %>';
    let myName;
    let socket;
    let serverPath = window.location.host;
    let lyricArr = [];
    let lyricIndex = getRandomInt(0, 10);// 让歌词开始时不要总是在第一句
    let lyricIntervalMs = 6000;
    let headImgMod = 40;
    let kejiImgMod = 24;
    let dateFormat = "yyyy-MM-dd";
    let showDateFormat = "yyyy年MM月dd日";
    let showTimeFormat = "yyyy年MM月dd日 hh:mm";
    let today = (new Date()).Format(dateFormat);
    // dom
    let $input_box;
    let $psw_input;
    let $online;
    let $lyric;
    let app;

    main();

    // 入口
    function main() {
        app = new Vue({
            el: '#app',
            data: {
                // 消息列表
                msgList: [],
                // 上个显示的日期
                lastDateForShow: "",
                // 上个显示的时间
                lastTimeForShow: "",
                // 上个消息的时间
                lastMsgTime: "",
                // 上个显示的名字
                lastNameForShow: "",
                // 显示时间点的时间间隔（毫秒）
                showTimeIntervalMs: 1 * 60 * 1000,
                // 所有人的名字set
                allNameSet: [],
                // 所有人的名字map
                allNameMap: {},
                // 是否显示输入框
                showTextarea: false,
                // 是否显示内容
                showContent: false,
                // 是否显示输入密码界面
                showPswBox: false,
                // 是否第一次显示密码界面
                firstShowPswBox: true,
            },
            mounted: function () {
                $input_box = $("#input_box");
                $psw_input = $("#psw_input");
                $online = $("#online");
                $lyric = $("#lyric");
            },
            methods: {
                authPsw: function () {
                    auth();
                },
                // 消息显示处理
                msgHandler: function (newMsgArr) {
                    if (!(newMsgArr && newMsgArr.length > 0)) {
                        return [];
                    }

                    newMsgArr.forEach(function (obj, $k) {
                        // 实测某些浏览器下（移动端） new Date(obj.time).getTime() 结果会为NAN，需要将-换成/
                        obj.time = obj.time.replace(/-/g, '/');

                        let userName = obj.name;
                        let nameHashCodeAbs = getHeadImgHashCodeAbs(userName);
                        let headsImgIndex = nameHashCodeAbs % headImgMod;

                        // 是否显示时间
                        obj.needShowTime = false;
                        if (needShowTime(obj.time, app.lastMsgTime, app.showTimeIntervalMs)) {
                            obj.needShowTime = true;
                            app.lastTimeForShow = obj.time;
                        }
                        // 上面判断完之后再做赋值操作
                        app.lastMsgTime = obj.time;
                        // 格式化时间
                        obj.timeForShow = (new Date(obj.time)).Format(showTimeFormat);
                        obj.KejiImg = getKejiImg(obj.timeForShow);

                        // 是否显示日期
                        obj.needShowDate = false;
                        if (needShowDate(obj.time, app.lastDateForShow)) {
                            obj.needShowDate = true;
                            app.lastDateForShow = obj.time;
                        }
                        // 格式化日期
                        obj.dateForShow = (new Date(obj.time)).Format(showDateFormat);

                        // 所有人的名字集合
                        if (!app.allNameMap[userName]) {
                            app.allNameMap[userName] = {
                                'userName': userName,
                                'nameHashCodeAbs': nameHashCodeAbs,
                                'headsImgIndex': headsImgIndex,
                                'headImgPath': getHeadImg(headsImgIndex),
                            };
                            app.allNameSet.push(userName);
                        }

                        obj.headImg = app.allNameMap[userName]['headImgPath'];

                        // 是否显示名字
                        obj.needShowName = false;
                        // 显示名字 (没有上次显示的名字 或 不是同一个人 或 显示了时间)
                        if (!app.lastNameForShow || app.lastNameForShow !== userName || obj.needShowTime) {
                            obj.needShowName = true;
                            app.lastNameForShow = userName;
                        }

                        // 是否是本人
                        obj.isMe = userName === myName;

                        app.msgList.push(obj);
                    });
                    this.$nextTick(function () {
                        scrollToBottom();
                    });
                }
            }
        });

        // 获取名字
        myName = getName();

        // 如果名字没获取到，不能往下执行，只能重载页面
        if (!myName) {
            // 2021-03-08 有反馈说一直在重载页面，这里不能这么暴力重载页面，应该要加个提示
            // window.location.reload();
            window.alert('加载名字时出错，请刷新页面重试');
            return;
        }

        $psw_input.bind('keyup', function (e) {
            if (13 === e.keyCode) {
                auth();
            }
        });

        socketInit(serverPath, roomId, '');
    }

    // 初始化socketIo
    function socketInit(path, roomIdQuery, tokenQuery) {
        // 尝试连接
        socket = connectServer(path, {
            token: tokenQuery,
            roomId: roomIdQuery,
        });

        /*  // The query content can also be updated on reconnection:
        socket.on('reconnect_attempt', () => {
            console.log('reconnect_attempt');
            socket.io.opts.query = {
                token: token
            }
        });*/

        // 异常捕捉
        socket.on('error', (errorStr) => {
            // 如果服务端报没有权限，则显示密码输入界面
            if (errorTypeConfig.notAuth === errorStr) {
                if (app.firstShowPswBox) {// 首次显示
                    showPswBox();
                } else {
                    error('输入密码错误');
                }
                return;
            }
            error(errorStr);
            console.log(error);
        });

        // 连接成功事件
        socket.on('connect', (arr) => {
            bindEvent();

            // 初始化歌词
            initLyricArr(shuffleArr(lyric));

            // 定时展示歌词
            $lyric.html(lyricArr[lyricIndex++]);
            setInterval(function () {
                if (lyricIndex > lyricArr.length - 1) {
                    lyricIndex = 0;
                }
                $lyric.html(lyricArr[lyricIndex++]);
            }, lyricIntervalMs);

            showMainBox();
        });
    }

    // 监听事件
    function bindEvent() {
        // 解决首次加载图片高度变化引起的没有下拉到底部
        /*window.onload = function(){
	    setTimeout(function(){
                scrollToBottom();
	    },2000);
        };*/

        $input_box.bind('keyup', function (e) {
            if (13 === e.keyCode) {
                say();
            }
        });

        $input_box.blur(function () {
            scrollToBottom();
        });

        // 推送名字和房间号
        send(channelConfig.first, {'name': myName, 'roomId': roomId});

        // 在线信息
        receive(getKey(channelConfig.online, roomId), function (arr) {
            if (!(arr && arr.length > 0)) {
                return;
            }
            var content = '当前在线：';
            for (var i in arr) {
                content += '[' + arr[i] + '] ';
            }
            $online.html(content);
        });

        // 初始化信息 - 接收聊天记录
        receive(getKey(channelConfig.init, roomId), function (arr) {
            let resultArr = [];
            if (!(arr && arr.length > 0)) {
                return resultArr;
            }
            arr.forEach(function (obj, $k) {
                resultArr.push(JSON.parse(obj));
            });
            app.msgHandler(resultArr);
        });

        // 通用信息
        receive(getKey(channelConfig.common, roomId), function (obj) {
            app.msgHandler([obj]);
        });
    }

    function connectServer(path, query) {
        return io(path, {
            query: query
        });
    }

    // 显示密码界面
    function showPswBox() {
        app.showPswBox = true;
        app.firstShowPswBox = false;
        app.showContent = false;
        app.showTextarea = false;
        $psw_input.val('');
        setTimeout(() => {
            $psw_input.focus();
        }, 100);
    }

    // 显示主界面
    function showMainBox() {
        app.showPswBox = false;
        app.showContent = true;
        app.showTextarea = true;
    }

    // 是否需要显示日期
    function needShowDate(time, lastMsgDate) {
        if (!time) {
            return false;
        }
        if (!lastMsgDate) {
            return true;
        }

        let currentDate = (new Date(time)).Format(dateFormat);
        let lastMsgDateTmp = (new Date(lastMsgDate)).Format(dateFormat);
        return currentDate !== lastMsgDateTmp;
    }

    // 是否需要显示时间
    function needShowTime(time, lastMsgTime, showTimeIntervalMs) {
        if (!time) {
            return false;
        }
        if (!lastMsgTime) {
            return true;
        }
        let timeUt = new Date(time).getTime();
        let lastTimeForShowUt = new Date(lastMsgTime).getTime();
        let diff = timeUt - lastTimeForShowUt;
        return diff >= showTimeIntervalMs;
    }


    // 滑动到底部
    function scrollToBottom() {
        scrollTo(0, document.body.scrollHeight);
    }

    // 说
    function auth() {
        let str = getPsw().trim();
        if (!str) {
            error("请输入密码");
            return;
        }
        $psw_input.val('');
        $psw_input.focus();
        socketInit(serverPath, roomId, md5(str));
    }

    // 说
    function say() {
        var str = escapeHtml(getC().trim());
        if (!str) {
            error("请输入内容");
            return;
        }
        let msgInfo = {
            'msg': str,
            'type': 'text'
        };
        send(channelConfig.common, msgInfo);
        $input_box.val("");
        $input_box.focus();
    }

    // 发送
    function send(channel, content, callback) {
        socket.emit(channel, content);
        callback && callback();
    }

    // 接收
    function receive(channel, callback) {
        socket.on(channel, function (msg) {
            callback(msg);
        });
    }

    function getKey(key, roomId) {
        return key + roomId;
    }

    // 获取密码框内容
    function getPsw() {
        return $psw_input.val();
    }

    // 获取输入框内容
    function getC() {
        return $input_box.val();
    }

    // 错误处理
    function error(str) {
        alert(str);
    }

    function getName() {
        // 从cookie中取
        let name = Cookies.get(getKey(cookieConfig.name, roomId));

        // 如果cookie没有则调用取名字的方法
        if (!name) {
            name = takeName(getRandomName());
        }

        // 如果取好了名字，则写入cookie
        if (name) {
            Cookies.set(getKey(cookieConfig.name, roomId), name, {'expires': 365, path: '/'});
        }
        return name;
    }

    function takeName(name) {
        // 2021-03-08 取名方式修改从弹框修改改为默认取
        /*let rs = prompt("帮你取了个好听的名字，如果喜欢就点确定吧，也可以修改后再确定哦^_^", name);
        if (rs && rs.length > 5) {
            alert('名字太长啦~');
            return null;
        }
        return rs;*/
        return name;
    }

    function getKejiImg(timeStr) {
        return '/images/keji' + (getHashCodeAbs(timeStr) % kejiImgMod) + '.png'
    }

    function getHeadImg(headImgIndex) {
        return '/images/headImg/' + headImgIndex + '.png'
    }

    function getHeadImgHashCodeAbs(userName) {
        let str = userName + today;
        return getHashCodeAbs(str);
    }

    function getHashCodeAbs(str) {
        return Math.abs(str.hashCode());
    }

    function initLyricArr(lyric) {
        for (let i in lyric) {
            let r = lyric[i];
            for (let j in r.lyric) {
                let l = r.lyric[j];
                lyricArr.push(l);
            }
        }
    }

    // 打乱数组顺序，注意这个并不是完全意义上的乱序
    function shuffleArr(arr) {
        if (!(arr && arr.length > 0 && arr instanceof Array)) {
            return arr;
        }

        return arr.sort(function () {
            return .5 - Math.random();
        });
    }

    /**
     * 对用户输入的数据进行简单处理，防止xss
     * */
    function escapeHtml(str) {
        if (!str) return '';
        // 转义&,一定要在最前处理，否则会把其它转义符号里的&也处理
        str = str.replace(/&/g, '&amp;');
        // 转义html < > 符号,常用于页面显示录入的文本中包含html
        str = str.replace(/</g, '&lt;');
        str = str.replace(/>/g, '&gt;');
        // 转义 " ' 符号，常用于html属性被"/'提前终止，
        // 如<img src="xxx" onerror="alert(1)"> 用户输入了 xxx" onerror="alert(1)
        str = str.replace(/"/g, '&quto;');
        str = str.replace(/'/g, '&#39;');
        // 转义空格，防止属性不写"或'下执行，
        // 如<img src=xxx onerror=alert(1) > 用户输入了 xxx onerror=alert(1)
        // 处理后浏览器不会执行只保留一个空格，如不处理，所有属性编程中必须使用 "/'
        //str = str.replace(/ /g,'&#32;');
        return str
    }

    /**
     * 获取指定值域的随机整数，返回结果包含最大值和最小值
     * @param {int} min 正整数，最小值
     * @param {int} max 正整数，最大值
     * @returns {number}
     */
    function getRandomInt(min, max) {
        if (!(/^\d+$/.test(min) && /^\d+$/.test(max) && max > min)) {
            throw 'param error!';
        }
        min = parseInt(min);
        max = parseInt(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    // 生成随机姓名
    function getRandomName() {
        let familyNames = [
            "赵", "钱", "孙", "李", "周", "吴", "郑", "王", "冯", "陈",
            "褚", "卫", "蒋", "沈", "韩", "杨", "朱", "秦", "尤", "许",
            "何", "吕", "施", "张", "孔", "曹", "严", "华", "金", "魏",
            "陶", "姜", "戚", "谢", "邹", "喻", "柏", "水", "窦", "章",
            "云", "苏", "潘", "葛", "奚", "范", "彭", "郎", "鲁", "韦",
            "昌", "马", "苗", "凤", "花", "方", "俞", "任", "袁", "柳",
            "酆", "鲍", "史", "唐", "费", "廉", "岑", "薛", "雷", "贺",
            "倪", "汤", "滕", "殷", "罗", "毕", "郝", "邬", "安", "常",
            "乐", "于", "时", "傅", "皮", "卞", "齐", "康", "伍", "余",
            "元", "卜", "顾", "孟", "平", "黄", "和", "穆", "萧", "尹"
        ];
        let givenNames = [
            "子璇", "淼", "国栋", "夫子", "瑞堂", "甜", "敏", "尚", "国贤", "贺祥", "晨涛",
            "昊轩", "易轩", "益辰", "益帆", "益冉", "瑾春", "瑾昆", "春齐", "杨", "文昊",
            "东东", "雄霖", "浩晨", "熙涵", "溶溶", "冰枫", "欣欣", "宜豪", "欣慧", "建政",
            "美欣", "淑慧", "文轩", "文杰", "欣源", "忠林", "榕润", "欣汝", "慧嘉", "新建",
            "建林", "亦菲", "林", "冰洁", "佳欣", "涵涵", "禹辰", "淳美", "泽惠", "伟洋",
            "涵越", "润丽", "翔", "淑华", "晶莹", "凌晶", "苒溪", "雨涵", "嘉怡", "佳毅",
            "子辰", "佳琪", "紫轩", "瑞辰", "昕蕊", "萌", "明远", "欣宜", "泽远", "欣怡",
            "佳怡", "佳惠", "晨茜", "晨璐", "运昊", "汝鑫", "淑君", "晶滢", "润莎", "榕汕",
            "佳钰", "佳玉", "晓庆", "一鸣", "语晨", "添池", "添昊", "雨泽", "雅晗", "雅涵",
            "清妍", "诗悦", "嘉乐", "晨涵", "天赫", "玥傲", "佳昊", "天昊", "萌萌", "若萌"
        ];
        return familyNames[getRandomInt(0, 100)] + givenNames[getRandomInt(0, 100)];
    }
</script>
</body>
</html>
